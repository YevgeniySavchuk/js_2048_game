{"version":3,"sources":["scripts/main.js"],"names":["start","document","querySelector","score","cells","querySelectorAll","messageStart","messageLose","messageWin","getMultipleRandom","arr","num","shuffled","sort","Math","random","slice","move","direction","schema","makeSchema","result","count","i","row","filter","el","index","numbers","emptyCells","movedRow","push","length","z","transferDataFromSchema","merge","y","toString","innerText","getCells","cell","className","classList","add","shift","addRandomNumber","randomCell","Array","keys","randomNumber","is2048","from","some","isPossibleMove","isEmptyCells","k","column","flag","addEventListener","twoRandomCells","twoRandomNumbers","remove","e","firstMask","JSON","stringify","key"],"mappings":"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","file":"main.1db9abfa.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst start = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\nconst cells = document.querySelectorAll('.field-cell');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nstart.flag = false;\n\nstart.addEventListener('click', () => {\n  const twoRandomCells = getMultipleRandom([...Array(cells.length).keys()], 2);\n  const twoRandomNumbers = getMultipleRandom([2, 2, 2, 2, 2, 2, 2, 2, 2, 4], 2);\n\n  start.flag = true;\n  score.innerText = 0;\n  start.innerText = 'Restart';\n  start.classList.remove('start');\n  start.classList.add('restart');\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  for (const cell of cells) {\n    cell.innerText = '';\n    cell.className = 'field-cell';\n  }\n\n  cells[twoRandomCells[0]].innerText = `${twoRandomNumbers[0]}`;\n  cells[twoRandomCells[0]].classList.add(`field-cell--${twoRandomNumbers[0]}`);\n  cells[twoRandomCells[1]].innerText = `${twoRandomNumbers[1]}`;\n  cells[twoRandomCells[1]].classList.add(`field-cell--${twoRandomNumbers[1]}`);\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (start.flag === false) {\n    return;\n  }\n\n  const firstMask = JSON.stringify(makeSchema());\n\n  if (e.key === 'ArrowLeft') {\n    move('left');\n    merge('left');\n    move('left');\n  }\n\n  if (e.key === 'ArrowRight') {\n    move('right');\n    merge('right');\n    move('right');\n  }\n\n  if (e.key === 'ArrowUp') {\n    move('up');\n    merge('up');\n    move('up');\n  }\n\n  if (e.key === 'ArrowDown') {\n    move('down');\n    merge('down');\n    move('down');\n  }\n\n  if (is2048()) {\n    messageWin.classList.remove('hidden');\n    start.flag = false;\n    start.classList.remove('restart');\n    start.classList.add('start');\n    start.innerText = 'Start';\n\n    return;\n  }\n\n  const secondMask = JSON.stringify(makeSchema());\n\n  if (firstMask !== secondMask) {\n    addRandomNumber();\n  }\n\n  if (!isPossibleMove()) {\n    messageLose.classList.remove('hidden');\n    start.flag = false;\n  }\n});\n\nfunction getMultipleRandom(arr, num) {\n  const shuffled = [...arr].sort(() => 0.5 - Math.random());\n\n  return shuffled.slice(0, num);\n}\n\nfunction move(direction) {\n  const schema = makeSchema();\n  const result = [];\n  let count = 0;\n\n  for (let i = 0; i < schema.length / 4; i++) {\n    let row = [];\n\n    if (direction === 'up' || direction === 'down') {\n      row = schema.filter((el, index) => index % 4 === i);\n    }\n\n    if (direction === 'left' || direction === 'right') {\n      row = schema.filter((el, index) => index < (i + 1) * 4 && index >= i * 4);\n    }\n\n    const numbers = row.filter(num => num !== '');\n    const emptyCells = row.filter(num => num === '');\n    let movedRow = [];\n\n    if (direction === 'left' || direction === 'up') {\n      movedRow = [...numbers, ...emptyCells];\n    }\n\n    if (direction === 'right' || direction === 'down') {\n      movedRow = [...emptyCells, ...numbers];\n    }\n\n    if (direction === 'left' || direction === 'right') {\n      result.push(...movedRow);\n    }\n\n    if (direction === 'up' || direction === 'down') {\n      result.length = 16;\n\n      for (let z = 0; z < row.length; z++) {\n        result.length = 16;\n        result[(z * 4 + count)] = movedRow[z];\n      }\n      count++;\n    }\n  }\n  transferDataFromSchema(result);\n}\n\nfunction merge(direction) {\n  const schema = makeSchema();\n  const result = [];\n  let count = 0;\n\n  for (let i = 0; i < schema.length / 4; i++) {\n    let row = [];\n\n    if (direction === 'up' || direction === 'down') {\n      row = schema.filter((el, index) => index % 4 === i);\n    }\n\n    if (direction === 'left' || direction === 'right') {\n      row = schema.filter((el, index) => index < (i + 1) * 4 && index >= i * 4);\n    }\n\n    if (direction === 'left' || direction === 'up') {\n      for (let y = 1; y < row.length; y++) {\n        if (row[y - 1] === row[y] && row[y - 1] !== '') {\n          row[y - 1] = (row[y - 1] *= 2).toString();\n          score.innerText = `${+score.innerText + +row[y - 1]}`;\n          row[y] = '';\n        }\n      }\n    }\n\n    if (direction === 'right' || direction === 'down') {\n      for (let y = row.length; y > 0; y--) {\n        if (row[y] === row[y - 1] && row[y] !== '') {\n          row[y] = (row[y] *= 2).toString();\n          score.innerText = `${+score.innerText + +row[y]}`;\n\n          row[y - 1] = '';\n        }\n      }\n    }\n\n    if (direction === 'left' || direction === 'right') {\n      result.push(...row);\n    }\n\n    if (direction === 'up' || direction === 'down') {\n      result.length = 16;\n\n      for (let z = 0; z < row.length; z++) {\n        result.length = 16;\n        result[(z * 4 + count)] = row[z];\n      }\n      count++;\n    }\n  }\n  transferDataFromSchema(result);\n}\n\nfunction makeSchema() {\n  const schema = [];\n\n  for (const cell of getCells()) {\n    schema.push(cell.innerText);\n  }\n\n  return schema;\n}\n\nfunction transferDataFromSchema(schema) {\n  for (const cell of getCells()) {\n    cell.innerText = schema[0];\n    cell.className = 'field-cell';\n    cell.classList.add(`field-cell--${cell.innerText}`);\n    schema.shift();\n  }\n}\n\nfunction getCells() {\n  return document.querySelectorAll('.field-cell');\n}\n\nfunction addRandomNumber() {\n  const emptyCells = [];\n\n  for (const cell of getCells()) {\n    if (cell.innerText === '') {\n      emptyCells.push(cell);\n    }\n  }\n\n  if (emptyCells.length === 0) {\n    return;\n  }\n\n  const randomCell = getMultipleRandom([...Array(emptyCells.length).keys()], 1);\n  const randomNumber = getMultipleRandom([2, 2, 2, 2, 2, 2, 2, 2, 2, 4], 1);\n\n  emptyCells[randomCell].innerText = `${randomNumber}`;\n  emptyCells[randomCell].classList.add(`field-cell--${randomNumber}`);\n\n  return emptyCells;\n}\n\nfunction is2048() {\n  return Array.from(getCells()).some(cell => cell.innerText === '2048');\n}\n\nfunction isPossibleMove() {\n  if (isEmptyCells()) {\n    return true;\n  }\n\n  const numbers = [];\n\n  for (const cell of getCells()) {\n    numbers.push(cell.innerText);\n  }\n\n  for (let i = 0; i < numbers.length / 4; i++) {\n    const row = numbers.slice(i * 4, i * 4 + 4);\n\n    for (let k = 1; k < row.length; k++) {\n      if (row[k - 1] === row[k]) {\n        return true;\n      }\n    }\n  }\n\n  for (let y = 0; y < numbers.length / 4; y++) {\n    const column = numbers.filter((el, index) => index % 4 === y);\n\n    for (let z = 1; z < column.length; z++) {\n      if (column[z - 1] === column[z]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isEmptyCells() {\n  const emptyCells = Array\n    .from(getCells()).filter(cell => cell.innerText === '');\n\n  if (emptyCells.length === 0) {\n    return false;\n  }\n\n  return true;\n}\n"]}